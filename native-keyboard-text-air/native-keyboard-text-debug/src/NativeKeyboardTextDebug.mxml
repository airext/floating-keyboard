<?xml version="1.0" encoding="utf-8"?>
<f:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:f="library://ns.feathersui.com/mxml"
               theme="feathers.themes.MetalWorksMobileTheme" showStats="true">


    <fx:Script>
        <![CDATA[
        import com.github.airext.NativeKeyboardText;
        import com.github.airext.keyboard.NativeKeyboardTextParams;
        import com.github.airext.keyboard.enum.AutoCapitalization;
        import com.github.airext.keyboard.enum.NativeKeyboardType;
        import com.github.airext.keyboard.enum.ReturnKeyType;
        import com.github.airext.keyboard.event.NativeKeyboardTextHideEvent;
        import com.github.airext.keyboard.event.NativeKeyboardTextInputEvent;
        import com.github.airext.keyboard.event.NativeKeyboardTextShowEvent;

        [Bindable]
        private var params: NativeKeyboardTextParams = new NativeKeyboardTextParams();

        [Bindable]
        private var shouldAutoHideKeyboard: Boolean = false;

        private function log(...args): void {
            outputText.text += args + "\n";
            outputText.verticalScrollPosition = outputText.maxVerticalScrollPosition;
            trace(args);
        }

        private function isSupportedTapped(): void {
            log(NativeKeyboardText.isSupported);
        }

        private function extensionVersionTapped(): void {
            log(NativeKeyboardText.extensionVersion);
        }

        private function openKeyboard(): void {
            NativeKeyboardText.shared.showKeyboard(params);
            if (shouldAutoHideKeyboard) {
                var handle: uint = setTimeout(function (): void {
                    clearTimeout(handle);
                    NativeKeyboardText.shared.hideKeyboard();
                }, 10 * 1000);
            }
        }

        private function hideKeyboard(): void {
            NativeKeyboardText.shared.hideKeyboard();
        }
        ]]>
    </fx:Script>

    <f:creationComplete>
        <![CDATA[
        NativeKeyboardText.shared.addEventListener(NativeKeyboardTextShowEvent.SHOW, function(event: NativeKeyboardTextShowEvent): void {
            log("Keyboard did show");
        });

        NativeKeyboardText.shared.addEventListener(NativeKeyboardTextHideEvent.HIDE, function (event: NativeKeyboardTextHideEvent): void {
            log("Keyboard did hide with oldText:" + event.oldText + ", newText: " + event.newText);
        });

        NativeKeyboardText.shared.addEventListener(NativeKeyboardTextInputEvent.INPUT, function(event: NativeKeyboardTextInputEvent): void {
            log("Keyboard input: " + event.text);
        });
        ]]>
    </f:creationComplete>

    <f:layout>
        <f:VerticalLayout paddingTop="44" paddingBottom="34" />
    </f:layout>

    <f:ScrollContainer>
        <f:layoutData>
            <f:VerticalLayoutData percentHeight="100" percentWidth="100" />
        </f:layoutData>
        <f:layout><f:VerticalLayout horizontalAlign="justify" gap="10" /></f:layout>
        <f:Button label="Is Supported" triggered="isSupportedTapped()" />
        <f:Button label="Extensions Version" triggered="extensionVersionTapped()" />
        <f:TextInput prompt="Initial Text" text="{params.text}" change="params.text = TextInput(event.target).text" />
        <f:TextInput prompt="Max Characters Count" text="{params.maxCharactersCount}" restrict="0-9" change="params.maxCharactersCount = parseInt(TextInput(event.target).text)" />
        <f:TextInput prompt="Character Filter" text="{params.characterFilter}" change="params.characterFilter = TextInput(event.target).text" />
        <f:Check label="Secure Text Input" isSelected="{params.isSecureTextEntry}" change="params.isSecureTextEntry = Check(event.target).isSelected;" />
        <f:Check label="Automatically Hide Keyboard after 10 seconds" isSelected="{shouldAutoHideKeyboard}" change="shouldAutoHideKeyboard = Check(event.target).isSelected" />
        <f:Button label="Open Keyboard" triggered="openKeyboard()" />
        <f:Button label="Hide Keyboard" triggered="hideKeyboard()" />
        <f:PickerList selectedItem="{params.keyboardType}" labelField="name" change="params.keyboardType = PickerList(event.target).selectedItem as NativeKeyboardType;">
            <f:dataProvider>
                <f:ArrayCollection>
                    {[
                    NativeKeyboardType.Default,
                    NativeKeyboardType.ASCIICapable,
                    NativeKeyboardType.NumbersAndPunctuation,
                    NativeKeyboardType.URL,
                    NativeKeyboardType.NumberPad,
                    NativeKeyboardType.PhonePad,
                    NativeKeyboardType.NamePhonePad,
                    NativeKeyboardType.EmailAddress,
                    NativeKeyboardType.DecimalPad,
                    NativeKeyboardType.Twitter,
                    NativeKeyboardType.WebSearch,
                    NativeKeyboardType.ASCIICapableNumberPad
                    ]}
                </f:ArrayCollection>
            </f:dataProvider>
        </f:PickerList>
        <f:PickerList selectedItem="{params.returnKeyType}" labelField="name" change="params.returnKeyType = PickerList(event.target).selectedItem as ReturnKeyType;">
            <f:dataProvider>
                <f:ArrayCollection>
                    {[
                    ReturnKeyType.Default,
                    ReturnKeyType.Go,
                    ReturnKeyType.Google,
                    ReturnKeyType.Join,
                    ReturnKeyType.Next,
                    ReturnKeyType.Route,
                    ReturnKeyType.Search,
                    ReturnKeyType.Send,
                    ReturnKeyType.Yahoo,
                    ReturnKeyType.Done,
                    ReturnKeyType.EmergencyCall,
                    ReturnKeyType.Continue
                    ]}
                </f:ArrayCollection>
            </f:dataProvider>
        </f:PickerList>
        <f:PickerList selectedItem="{params.autoCapitalization}" labelField="name" change="params.autoCapitalization = PickerList(event.target).selectedItem as AutoCapitalization;">
            <f:dataProvider>
                <f:ArrayCollection>
                    {[
                    AutoCapitalization.None,
                    AutoCapitalization.Words,
                    AutoCapitalization.Sentences,
                    AutoCapitalization.AllCharacters
                    ]}
                </f:ArrayCollection>
            </f:dataProvider>
        </f:PickerList>
    </f:ScrollContainer>

    <f:ScrollText id="outputText" height="100">
        <f:layoutData>
            <f:VerticalLayoutData percentWidth="100" />
        </f:layoutData>
    </f:ScrollText>

</f:Application>
